# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Compressor', [dirname(__file__)])
        except ImportError:
            import _Compressor
            return _Compressor
        if fp is not None:
            try:
                _mod = imp.load_module('_Compressor', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Compressor = swig_import_helper()
    del swig_import_helper
else:
    import _Compressor
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Compressor.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Compressor.SwigPyIterator_value(self)
    def incr(self, n=1): return _Compressor.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _Compressor.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Compressor.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Compressor.SwigPyIterator_equal(self, *args)
    def copy(self): return _Compressor.SwigPyIterator_copy(self)
    def next(self): return _Compressor.SwigPyIterator_next(self)
    def __next__(self): return _Compressor.SwigPyIterator___next__(self)
    def previous(self): return _Compressor.SwigPyIterator_previous(self)
    def advance(self, *args): return _Compressor.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Compressor.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Compressor.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Compressor.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Compressor.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Compressor.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Compressor.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Compressor.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _Compressor.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Compressor.vectord___nonzero__(self)
    def __bool__(self): return _Compressor.vectord___bool__(self)
    def __len__(self): return _Compressor.vectord___len__(self)
    def pop(self): return _Compressor.vectord_pop(self)
    def __getslice__(self, *args): return _Compressor.vectord___getslice__(self, *args)
    def __setslice__(self, *args): return _Compressor.vectord___setslice__(self, *args)
    def __delslice__(self, *args): return _Compressor.vectord___delslice__(self, *args)
    def __delitem__(self, *args): return _Compressor.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _Compressor.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _Compressor.vectord___setitem__(self, *args)
    def append(self, *args): return _Compressor.vectord_append(self, *args)
    def empty(self): return _Compressor.vectord_empty(self)
    def size(self): return _Compressor.vectord_size(self)
    def clear(self): return _Compressor.vectord_clear(self)
    def swap(self, *args): return _Compressor.vectord_swap(self, *args)
    def get_allocator(self): return _Compressor.vectord_get_allocator(self)
    def begin(self): return _Compressor.vectord_begin(self)
    def end(self): return _Compressor.vectord_end(self)
    def rbegin(self): return _Compressor.vectord_rbegin(self)
    def rend(self): return _Compressor.vectord_rend(self)
    def pop_back(self): return _Compressor.vectord_pop_back(self)
    def erase(self, *args): return _Compressor.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _Compressor.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Compressor.vectord_push_back(self, *args)
    def front(self): return _Compressor.vectord_front(self)
    def back(self): return _Compressor.vectord_back(self)
    def assign(self, *args): return _Compressor.vectord_assign(self, *args)
    def resize(self, *args): return _Compressor.vectord_resize(self, *args)
    def insert(self, *args): return _Compressor.vectord_insert(self, *args)
    def reserve(self, *args): return _Compressor.vectord_reserve(self, *args)
    def capacity(self): return _Compressor.vectord_capacity(self)
    __swig_destroy__ = _Compressor.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _Compressor.vectord_swigregister
vectord_swigregister(vectord)

class OutputEntryClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputEntryClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputEntryClass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Compressor.new_OutputEntryClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Compressor.delete_OutputEntryClass
    __del__ = lambda self : None;
OutputEntryClass_swigregister = _Compressor.OutputEntryClass_swigregister
OutputEntryClass_swigregister(OutputEntryClass)

class ACHPComponentClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ACHPComponentClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ACHPComponentClass, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Compressor.delete_ACHPComponentClass
    __del__ = lambda self : None;
ACHPComponentClass_swigregister = _Compressor.ACHPComponentClass_swigregister
ACHPComponentClass_swigregister(ACHPComponentClass)

class CompressorClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompressorClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompressorClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Compressor.new_CompressorClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Compressor.delete_CompressorClass
    __del__ = lambda self : None;
    __swig_setmethods__["Tsat_s_K"] = _Compressor.CompressorClass_Tsat_s_K_set
    __swig_getmethods__["Tsat_s_K"] = _Compressor.CompressorClass_Tsat_s_K_get
    if _newclass:Tsat_s_K = _swig_property(_Compressor.CompressorClass_Tsat_s_K_get, _Compressor.CompressorClass_Tsat_s_K_set)
    __swig_setmethods__["Tsat_d_K"] = _Compressor.CompressorClass_Tsat_d_K_set
    __swig_getmethods__["Tsat_d_K"] = _Compressor.CompressorClass_Tsat_d_K_get
    if _newclass:Tsat_d_K = _swig_property(_Compressor.CompressorClass_Tsat_d_K_get, _Compressor.CompressorClass_Tsat_d_K_set)
    __swig_setmethods__["DT_sh_K"] = _Compressor.CompressorClass_DT_sh_K_set
    __swig_getmethods__["DT_sh_K"] = _Compressor.CompressorClass_DT_sh_K_get
    if _newclass:DT_sh_K = _swig_property(_Compressor.CompressorClass_DT_sh_K_get, _Compressor.CompressorClass_DT_sh_K_set)
    __swig_setmethods__["Tsat_s"] = _Compressor.CompressorClass_Tsat_s_set
    __swig_getmethods__["Tsat_s"] = _Compressor.CompressorClass_Tsat_s_get
    if _newclass:Tsat_s = _swig_property(_Compressor.CompressorClass_Tsat_s_get, _Compressor.CompressorClass_Tsat_s_set)
    __swig_setmethods__["Tsat_d"] = _Compressor.CompressorClass_Tsat_d_set
    __swig_getmethods__["Tsat_d"] = _Compressor.CompressorClass_Tsat_d_get
    if _newclass:Tsat_d = _swig_property(_Compressor.CompressorClass_Tsat_d_get, _Compressor.CompressorClass_Tsat_d_set)
    __swig_setmethods__["power_map"] = _Compressor.CompressorClass_power_map_set
    __swig_getmethods__["power_map"] = _Compressor.CompressorClass_power_map_get
    if _newclass:power_map = _swig_property(_Compressor.CompressorClass_power_map_get, _Compressor.CompressorClass_power_map_set)
    __swig_setmethods__["Vdot_ratio"] = _Compressor.CompressorClass_Vdot_ratio_set
    __swig_getmethods__["Vdot_ratio"] = _Compressor.CompressorClass_Vdot_ratio_get
    if _newclass:Vdot_ratio = _swig_property(_Compressor.CompressorClass_Vdot_ratio_get, _Compressor.CompressorClass_Vdot_ratio_set)
    __swig_setmethods__["P1"] = _Compressor.CompressorClass_P1_set
    __swig_getmethods__["P1"] = _Compressor.CompressorClass_P1_get
    if _newclass:P1 = _swig_property(_Compressor.CompressorClass_P1_get, _Compressor.CompressorClass_P1_set)
    __swig_setmethods__["P2"] = _Compressor.CompressorClass_P2_set
    __swig_getmethods__["P2"] = _Compressor.CompressorClass_P2_get
    if _newclass:P2 = _swig_property(_Compressor.CompressorClass_P2_get, _Compressor.CompressorClass_P2_set)
    __swig_setmethods__["F"] = _Compressor.CompressorClass_F_set
    __swig_getmethods__["F"] = _Compressor.CompressorClass_F_get
    if _newclass:F = _swig_property(_Compressor.CompressorClass_F_get, _Compressor.CompressorClass_F_set)
    __swig_setmethods__["T1_actual"] = _Compressor.CompressorClass_T1_actual_set
    __swig_getmethods__["T1_actual"] = _Compressor.CompressorClass_T1_actual_get
    if _newclass:T1_actual = _swig_property(_Compressor.CompressorClass_T1_actual_get, _Compressor.CompressorClass_T1_actual_set)
    __swig_setmethods__["v_map"] = _Compressor.CompressorClass_v_map_set
    __swig_getmethods__["v_map"] = _Compressor.CompressorClass_v_map_get
    if _newclass:v_map = _swig_property(_Compressor.CompressorClass_v_map_get, _Compressor.CompressorClass_v_map_set)
    __swig_setmethods__["v_actual"] = _Compressor.CompressorClass_v_actual_set
    __swig_getmethods__["v_actual"] = _Compressor.CompressorClass_v_actual_get
    if _newclass:v_actual = _swig_property(_Compressor.CompressorClass_v_actual_get, _Compressor.CompressorClass_v_actual_set)
    __swig_setmethods__["mdot"] = _Compressor.CompressorClass_mdot_set
    __swig_getmethods__["mdot"] = _Compressor.CompressorClass_mdot_get
    if _newclass:mdot = _swig_property(_Compressor.CompressorClass_mdot_get, _Compressor.CompressorClass_mdot_set)
    __swig_setmethods__["fp"] = _Compressor.CompressorClass_fp_set
    __swig_getmethods__["fp"] = _Compressor.CompressorClass_fp_get
    if _newclass:fp = _swig_property(_Compressor.CompressorClass_fp_get, _Compressor.CompressorClass_fp_set)
    __swig_setmethods__["eta_oi"] = _Compressor.CompressorClass_eta_oi_set
    __swig_getmethods__["eta_oi"] = _Compressor.CompressorClass_eta_oi_get
    if _newclass:eta_oi = _swig_property(_Compressor.CompressorClass_eta_oi_get, _Compressor.CompressorClass_eta_oi_set)
    __swig_setmethods__["Wdot"] = _Compressor.CompressorClass_Wdot_set
    __swig_getmethods__["Wdot"] = _Compressor.CompressorClass_Wdot_get
    if _newclass:Wdot = _swig_property(_Compressor.CompressorClass_Wdot_get, _Compressor.CompressorClass_Wdot_set)
    __swig_setmethods__["CycleEnergyIn"] = _Compressor.CompressorClass_CycleEnergyIn_set
    __swig_getmethods__["CycleEnergyIn"] = _Compressor.CompressorClass_CycleEnergyIn_get
    if _newclass:CycleEnergyIn = _swig_property(_Compressor.CompressorClass_CycleEnergyIn_get, _Compressor.CompressorClass_CycleEnergyIn_set)
    __swig_setmethods__["Vdot_pumped"] = _Compressor.CompressorClass_Vdot_pumped_set
    __swig_getmethods__["Vdot_pumped"] = _Compressor.CompressorClass_Vdot_pumped_get
    if _newclass:Vdot_pumped = _swig_property(_Compressor.CompressorClass_Vdot_pumped_get, _Compressor.CompressorClass_Vdot_pumped_set)
    __swig_setmethods__["P"] = _Compressor.CompressorClass_P_set
    __swig_getmethods__["P"] = _Compressor.CompressorClass_P_get
    if _newclass:P = _swig_property(_Compressor.CompressorClass_P_get, _Compressor.CompressorClass_P_set)
    __swig_setmethods__["M"] = _Compressor.CompressorClass_M_set
    __swig_getmethods__["M"] = _Compressor.CompressorClass_M_get
    if _newclass:M = _swig_property(_Compressor.CompressorClass_M_get, _Compressor.CompressorClass_M_set)
    __swig_setmethods__["inlet_state"] = _Compressor.CompressorClass_inlet_state_set
    __swig_getmethods__["inlet_state"] = _Compressor.CompressorClass_inlet_state_get
    if _newclass:inlet_state = _swig_property(_Compressor.CompressorClass_inlet_state_get, _Compressor.CompressorClass_inlet_state_set)
    __swig_setmethods__["outlet_state"] = _Compressor.CompressorClass_outlet_state_set
    __swig_getmethods__["outlet_state"] = _Compressor.CompressorClass_outlet_state_get
    if _newclass:outlet_state = _swig_property(_Compressor.CompressorClass_outlet_state_get, _Compressor.CompressorClass_outlet_state_set)
    def set_P(self, *args): return _Compressor.CompressorClass_set_P(self, *args)
    def speed_test(self, *args): return _Compressor.CompressorClass_speed_test(self, *args)
    def calculate(self): return _Compressor.CompressorClass_calculate(self)
    def test(self): return _Compressor.CompressorClass_test(self)
    def OutputList(self): return _Compressor.CompressorClass_OutputList(self)
CompressorClass_swigregister = _Compressor.CompressorClass_swigregister
CompressorClass_swigregister(CompressorClass)

# This file is compatible with both classic and new-style classes.


